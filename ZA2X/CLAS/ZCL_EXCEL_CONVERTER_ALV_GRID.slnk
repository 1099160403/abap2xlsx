<?xml version="1.0" encoding="utf-16"?>
<CLAS CLSNAME="ZCL_EXCEL_CONVERTER_ALV_GRID" VERSION="1" LANGU="E" DESCRIPT="SALV converter" UUID="4F037FA9DF490087E1008000C008015A" CATEGORY="00" EXPOSURE="2" STATE="1" RELEASE="0" AUTHOR="RTURNHEIM" CREATEDON="20120131" CHANGEDON="20120131" CHGDANYON="00000000" CLSFINAL="X" CLSCCINCL="X" FIXPT="X" UNICODE="X" R3RELEASE="700" CLSBCCAT="00" DURATION_TYPE="0 " RISK_LEVEL="0 " REFCLSNAME="ZCL_EXCEL_CONVERTER_ALV" CHANGEDBY="RTURNHEIM">
 <publicSection>class ZCL_EXCEL_CONVERTER_ALV_GRID definition
  public
  inheriting from ZCL_EXCEL_CONVERTER_ALV
  final
  create public .

*&quot;* public components of class ZCL_EXCEL_CONVERTER_ALV_GRID
*&quot;* do not include other source files here!!!
public section.

  methods ZIF_EXCEL_CONVERTER~CAN_CONVERT_OBJECT
    redefinition .
  methods ZIF_EXCEL_CONVERTER~CREATE_FIELDCATALOG
    redefinition .</publicSection>
 <protectedSection>*&quot;* protected components of class ZCL_EXCEL_CONVERTER_ALV_GRID
*&quot;* do not include other source files here!!!
protected section.</protectedSection>
 <privateSection>*&quot;* private components of class ZCL_EXCEL_CONVERTER_ALV_GRID
*&quot;* do not include other source files here!!!
private section.</privateSection>
 <localImplementation>*&quot;* local class implementation for public class
*&quot;* use this source file for the implementation part of
*&quot;* local helper classes</localImplementation>
 <localTypes>*&quot;* use this source file for any type declarations (class
*&quot;* definitions, interfaces or data types) you need for method
*&quot;* implementation or private method&apos;s signature</localTypes>
 <localMacros>*&quot;* use this source file for any macro definitions you need
*&quot;* in the implementation part of the class</localMacros>
 <inheritance CLSNAME="ZCL_EXCEL_CONVERTER_ALV_GRID" REFCLSNAME="ZCL_EXCEL_CONVERTER_ALV" VERSION="1" STATE="1" AUTHOR="RTURNHEIM" CREATEDON="20120131" CHANGEDBY="RTURNHEIM" CHANGEDON="20120131">
  <redefinition CLSNAME="ZCL_EXCEL_CONVERTER_ALV_GRID" REFCLSNAME="ZCL_EXCEL_CONVERTER_ALV" VERSION="1" MTDNAME="ZIF_EXCEL_CONVERTER~CAN_CONVERT_OBJECT"/>
  <redefinition CLSNAME="ZCL_EXCEL_CONVERTER_ALV_GRID" REFCLSNAME="ZCL_EXCEL_CONVERTER_ALV" VERSION="1" MTDNAME="ZIF_EXCEL_CONVERTER~CREATE_FIELDCATALOG"/>
 </inheritance>
 <interfaceMethod CLSNAME="ZCL_EXCEL_CONVERTER_ALV_GRID" CPDNAME="ZIF_EXCEL_CONVERTER~CAN_CONVERT_OBJECT">
  <source>method ZIF_EXCEL_CONVERTER~CAN_CONVERT_OBJECT.
  data: lo_alv type REF TO cl_gui_alv_grid.

  try.
      lo_alv ?= io_object.
    catch cx_sy_move_cast_error .
      raise exception type zcx_excel.
  endtry.

endmethod.</source>
 </interfaceMethod>
 <interfaceMethod CLSNAME="ZCL_EXCEL_CONVERTER_ALV_GRID" CPDNAME="ZIF_EXCEL_CONVERTER~CREATE_FIELDCATALOG">
  <source>METHOD zif_excel_converter~create_fieldcatalog.
  DATA: lo_alv TYPE REF TO cl_gui_alv_grid.

  TRY.
    zif_excel_converter~can_convert_object( io_object = io_object ).
  ENDTRY.

  lo_alv ?= io_object.

  CLEAR: es_layout,
         et_fieldcatalog.

  IF lo_alv IS BOUND.
    lo_alv-&gt;get_frontend_fieldcatalog( IMPORTING et_fieldcatalog = wt_fcat ).
    lo_alv-&gt;get_frontend_layout( IMPORTING es_layout = ws_layo ).
    lo_alv-&gt;get_sort_criteria( IMPORTING et_sort = wt_sort ) .
    lo_alv-&gt;get_filter_criteria( IMPORTING et_filter = wt_filt ) .

    apply_sort( EXPORTING it_table = it_table
                IMPORTING eo_table = eo_table ) .

    get_color( EXPORTING io_table    = eo_table
               IMPORTING et_colors   = et_colors ) .

    get_filter( EXPORTING io_table   = eo_table
                IMPORTING et_filter  = et_filter ) .

    update_catalog( CHANGING  cs_layout       = es_layout
                              ct_fieldcatalog = et_fieldcatalog ).
  ENDIF.
ENDMETHOD.</source>
 </interfaceMethod>
</CLAS>
